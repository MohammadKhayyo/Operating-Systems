Virtual Memory Management
Authored by : mohammad khayyo


===================Description===================
this exercise, it is a simulator of the memory and CPU methods is realized, we use the paging mechanism, and virtual memory is paged out and fetched into main memory as needed.
The exercise has a storage and loading function to simulate a CPU read/write, and the exercise uses a page table that defines the logic of the physical pages.
valid colm page table: helps to see if the page is in memory, Dirty colm: helps to know if the page has already been used and you made changes to it
colm permission: help tell if a page is able to read or write, Frame colm: help tell what frame the page is in main memory (splits main memory into frames)
Swap pointer colm: Helps find out where to put the page in the swap file.

The logical address generated by the CPU is divided into:
Page number, page offset .
using this formula to calculate the page size :
"size address / page_size"
and this formula also to calculate the offset 
"address % page_size"

the exercise contain a page table and work on the paging style, the table contain :(V)(D)(P)(F)(S)

V - valid - check if the found in the main memory
D - Dirty - if the page has used or get changed
P - Permission - simulate the read and write 
F - frame - find in which place the frame is placed 
S - swap - where the page is placed in the swap file


===================Functions===================

they have 8 functions , one construct and destructor :
1. load: bring from the logical memory to main memory for reading it.
2. store : bring from the logical memory to main memory for change the value.
3. repetition_count:if the queue is not empty search the page if its found in the queue , if found , deleting it.
4. WriteThePageToSwap : sending the page to the swap during the use of LUR.
5. EmptyPlace : return empty frame.
6. print_memory: printing the memory.
7. print_swap: printing the swap.
8. print_page_table: printing the page table.
sim_mem : are construct realised.
~sim_mem :  destructor realised.



==========Program Files==============

sim_mem.h : contain the header 
sim_mem.cpp : contain the functions 

main.cpp : the main .


=================compiling steps===================

compile: g++ sim_mem.cpp main.cpp -o main 
run: ./main


================= Output ===================

 Physical memory
[P]
[Q]
[P]
[P]
[P]
[c]
[c]
[c]
[c]
[c]

 Swap memory
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	

 page table 
Valid	 Dirty	 Permission 	 Frame	 Swap index
[0]		[0]			[0]			[-1]		[-1]
[0]		[0]			[0]			[-1]		[-1]
[1]		[1]			[1]			[0]		[-1]
[1]		[0]			[1]			[1]		[-1]
[0]		[0]			[1]			[-1]		[-1]
[0]		[0]			[1]			[-1]		[-1]
[0]		[0]			[1]			[-1]		[-1]

 Physical memory
[0]
[0]
[k]
[0]
[0]
[0]
[0]
[X]
[0]
[0]

 Swap memory
0 - [P]	1 - [Q]	2 - [P]	3 - [P]	4 - [P]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	

 page table 
Valid	 Dirty	 Permission 	 Frame	 Swap index
[0]		[0]			[0]			[-1]		[-1]
[0]		[0]			[0]			[-1]		[-1]
[0]		[1]			[1]			[-1]		[0]
[0]		[0]			[1]			[-1]		[-1]
[0]		[0]			[1]			[-1]		[-1]
[1]		[1]			[1]			[1]		[-1]
[1]		[1]			[1]			[0]		[-1]

 Physical memory
[b]
[b]
[b]
[b]
[b]
[P]
[Q]
[P]
[P]
[P]

 Swap memory
0 - [0]	1 - [0]	2 - [X]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [k]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	

 page table 
Valid	 Dirty	 Permission 	 Frame	 Swap index
[0]		[0]			[0]			[-1]		[-1]
[1]		[0]			[0]			[0]		[-1]
[1]		[1]			[1]			[1]		[-1]
[0]		[0]			[1]			[-1]		[-1]
[0]		[0]			[1]			[-1]		[-1]
[0]		[1]			[1]			[-1]		[0]
[0]		[1]			[1]			[-1]		[1]

 Physical memory
[0]
[0]
[k]
[0]
[k]
[0]
[0]
[x]
[0]
[0]

 Swap memory
0 - [P]	1 - [Q]	2 - [P]	3 - [P]	4 - [P]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	

 page table 
Valid	 Dirty	 Permission 	 Frame	 Swap index
[0]		[0]			[0]			[-1]		[-1]
[0]		[0]			[0]			[-1]		[-1]
[0]		[1]			[1]			[-1]		[0]
[0]		[0]			[1]			[-1]		[-1]
[0]		[0]			[1]			[-1]		[-1]
[1]		[1]			[1]			[1]		[-1]
[1]		[1]			[1]			[0]		[-1]

 Physical memory
[b]
[b]
[b]
[b]
[b]
[P]
[Q]
[P]
[P]
[P]

 Swap memory
0 - [0]	1 - [0]	2 - [x]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [k]	3 - [0]	4 - [k]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	
0 - [0]	1 - [0]	2 - [0]	3 - [0]	4 - [0]	

 page table 
Valid	 Dirty	 Permission 	 Frame	 Swap index
[0]		[0]			[0]			[-1]		[-1]
[1]		[0]			[0]			[0]		[-1]
[1]		[1]			[1]			[1]		[-1]
[0]		[0]			[1]			[-1]		[-1]
[0]		[0]			[1]			[-1]		[-1]
[0]		[1]			[1]			[-1]		[0]
[0]		[1]			[1]			[-1]		[1]


